pipeline {
  agent any
  environment {
    TF_IN_AUTOMATION = 'true'
    TF_CLI_CONFIG_FILE = credentials('tf-creds')
    AWS_SHARED_CREDENTIALS_FILE='~/.aws/credentials'
}
  stages {
    stage('Init') {
      steps {
        sh 'ls'
        sh 'cat $BRANCH_NAME.tfvars'
#       sh 'export TF_IN_AUTOMATION=true'
        sh 'terraform init -no-color'
}
}
    stage('Plan') {
      steps {
#       sh 'export IF_IN_AUTOMATION=true'
        sh 'terraform init -no-color -var-file="$BRANCH_NAME.tfvars"'
}
}
    stage('Validate Aplly') {
      input {
        message "Do you want to apply this plan?"
        ok "Aplly this plan."
}
      steps {
        echo 'Aplly Accepted'
}
}
    stage('Apply') {
      steps {
        sh 'terraform apply -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
}
}
    stage('Ec2 Wait') {
      steps {
        sh 'aws ec2 wait instance-status-ok --region eu-central-1'
}
}
    stage('Validate Ansible') {
      input {
        message "Do you want to run Ansible?"
        ok "Run Ansible!."
}
      steps {
        echo 'Ansible Accepted'
}
} 
    stage('Ansible') {
      steps {
        ansiblePlaybook(credentialsId: 'ec2-ssh-key', inventory: 'aws_hosts', playbook: 'playbooks/main-playbook.yml')
}
}
    stage('Validate Destroy') {
      input {
        message "Do you destroy all the things?"
        ok "Destroy!"
}
}
    stage('Destroy') {
      steps {
        sh 'terraform apply -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
}
}   
}
 post {
   success {
     echo 'Success!'
}
   failure {
     sh 'terraform destroy -auto-approve -no-color -var-file="$BRANCH_NAME.tfvars"'
}
}
}
